stages:
 - build
 - test
 - quality
 - deploy

.build_template_make: &build_definition_make
  stage: build
  script:
   - mkdir -p build
   - cd build
   - cmake -G "Unix Makefiles" -DWITH_TESTS=ON ..
   - make -j 4
  artifacts:
    paths:
     - "build/"

.test_template_make: &test_definition_make
  stage: test
  script:
   - cd build
   - make test
  artifacts:
    paths:
     - "build/"

build-debian:oldstable:
  image: cphtum/docker-bertha-debian:oldstable
  tags:
   - docker
   - linux
  <<: *build_definition_make

build-doc:
  image: cphtum/docker-bertha-debian:oldstable
  tags:
   - docker
   - linux
  stage: build
  script:
   - mkdir -p build
   - cd build
   - cmake -G "Unix Makefiles" ..
   - make doc
  artifacts:
    paths:
     - "build/"

test-debian:oldstable:
  image: cphtum/docker-bertha-debian:oldstable
  tags:
   - docker
   - linux
  dependencies:
   - build-debian:oldstable
  <<: *test_definition_make

coverage:
  image: cphtum/docker-bertha-debian:oldstable
  tags:
   - docker
   - linux
  stage: quality
  dependencies:
   - test-debian:oldstable
  script:
   - cd build
   - python3 -m gcovr -r .. --html-details > coverage.html
   - python3 -m gcovr -r ..
  artifacts:
    paths:
     - "build/coverage.html"

cpp-format:
  image: cphtum/docker-bertha-debian:oldstable
  tags:
   - docker
   - linux
  stage: quality
  dependencies:
   - build-debian:oldstable
  script:
   - cd build
   - make format
   - cd ..
   - git diff > build/format_check_revisionlist.txt &&
     modified=`git diff | wc -l` &&
     if [ "$modified" -gt "0" ]; then result=1; else result=0; fi &&
     exit $result
  artifacts:
    when: on_failure
    paths:
     - "build/format_check_revisionlist.txt"
  allow_failure: true

pages:
  image: cphtum/docker-bertha-debian:oldstable
  tags:
   - docker
   - linux
  stage: deploy
  dependencies:
   - build-doc
   - coverage
  script:
   - mv build/html/ public/
   - mv build/coverage.html public/
  artifacts:
    paths:
     - "public/"
  only:
   - master
